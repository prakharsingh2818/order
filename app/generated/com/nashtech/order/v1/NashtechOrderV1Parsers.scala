/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 1.0.1
 * User agent: apibuilder app.apibuilder.io/nashtech/order/latest/anorm_2_x_parsers
 */
import anorm._

package com.nashtech.order.v1.anorm.parsers {

  import com.nashtech.order.v1.anorm.conversions.Standard._

  import com.nashtech.order.v1.anorm.conversions.Types._

  object Error {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[com.nashtech.order.v1.models.Error] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      code: String = "code",
      message: String = "message",
      prefixOpt: Option[String] = None
    ): RowParser[com.nashtech.order.v1.models.Error] = {
      SqlParser.str(prefixOpt.getOrElse("") + code) ~
      SqlParser.get[Seq[String]](prefixOpt.getOrElse("") + message) map {
        case code ~ message => {
          com.nashtech.order.v1.models.Error(
            code = code,
            message = message
          )
        }
      }
    }

  }

  object Order {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[com.nashtech.order.v1.models.Order] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      id: String = "id",
      number: String = "number",
      merchantId: String = "merchant_id",
      submittedAt: String = "submitted_at",
      total: String = "total",
      prefixOpt: Option[String] = None
    ): RowParser[com.nashtech.order.v1.models.Order] = {
      SqlParser.str(prefixOpt.getOrElse("") + id) ~
      SqlParser.str(prefixOpt.getOrElse("") + number) ~
      SqlParser.str(prefixOpt.getOrElse("") + merchantId) ~
      SqlParser.get[_root_.org.joda.time.DateTime](prefixOpt.getOrElse("") + submittedAt) ~
      SqlParser.get[BigDecimal](prefixOpt.getOrElse("") + total) map {
        case id ~ number ~ merchantId ~ submittedAt ~ total => {
          com.nashtech.order.v1.models.Order(
            id = id,
            number = number,
            merchantId = merchantId,
            submittedAt = submittedAt,
            total = total
          )
        }
      }
    }

  }

  object OrderForm {

    def parserWithPrefix(prefix: String, sep: String = "_"): RowParser[com.nashtech.order.v1.models.OrderForm] = parser(prefixOpt = Some(s"$prefix$sep"))

    def parser(
      total: String = "total",
      prefixOpt: Option[String] = None
    ): RowParser[com.nashtech.order.v1.models.OrderForm] = {
      SqlParser.get[BigDecimal](prefixOpt.getOrElse("") + total) map {
        case total => {
          com.nashtech.order.v1.models.OrderForm(
            total = total
          )
        }
      }
    }

  }

}